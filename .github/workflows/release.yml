name: Release
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: Roadwork
            asset_name: Roadwork-linux-amd64
            friendly_name: Roadwork
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: Roadwork.app # Changed artifact name
            asset_name: Roadwork-macos-amd64
            friendly_name: Roadwork.app # Corrected friendly name to match artifact_name
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: Roadwork.exe
            asset_name: Roadwork-windows-amd64.exe
            friendly_name: Roadwork.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install cargo-bundle dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install librsvg pango pkg-config
          # Install cargo-bundle and cargo-bundle-licenses
          cargo install cargo-bundle cargo-bundle-licenses --locked

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Generate licenses (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo bundle-licenses --format yaml --output THIRDPARTY.yml

      - name: Build release binary/bundle
        uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.os == 'macos-latest' && 'bundle' || 'build' }}
          args: --release --target ${{ matrix.target }}

      - name: Prepare artifact (Linux/Windows)
        if: matrix.os != 'macos-latest'
        shell: bash
        run: |
          mkdir -p release/Roadwork
          # Copy binary and rename to friendly name
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/Roadwork/${{ matrix.friendly_name }}
          # Copy assets
          # Copy license and readme
          cp LICENSE release/Roadwork/ || cp LICENCE release/Roadwork/ || echo "No license file found"
          cp README.md release/Roadwork/ || echo "No README.md file found"

          # Create archive based on OS
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip Roadwork-${{ github.ref_name }}-${{ matrix.asset_name }}.zip Roadwork
          else
            tar -czf Roadwork-${{ github.ref_name }}-${{ matrix.asset_name }}.tar.gz Roadwork
          fi
          cd ..

      - name: Prepare artifact (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          APP_NAME="${{ matrix.friendly_name }}"
          APP_DIR="target/${{ matrix.target }}/release/bundle/osx/$APP_NAME"
          DMG_NAME="Roadwork-${{ github.ref_name }}-${{ matrix.asset_name }}.dmg"
          VOL_NAME="Disk Mosaic ${{ github.ref_name }}"

          # Ensure the app directory exists
          if [ ! -d "$APP_DIR" ]; then
            echo "Error: App directory not found at $APP_DIR"
            exit 1
          fi

          # Create Resources directory if it doesn't exist
          mkdir -p "$APP_DIR/Contents/Resources"

          # Copy assets, license, readme, and third-party licenses
          cp packaging/DiskMosaic.app/Contents/Info.plist "$APP_DIR/Contents/"
          cp packaging/DiskMosaic.app/Contents/Resources/AppIcon.icns "$APP_DIR/Contents/Resources/"
          cp LICENSE "$APP_DIR/Contents/Resources/" || cp LICENCE "$APP_DIR/Contents/Resources/" || echo "No license file found"
          cp README.md "$APP_DIR/Contents/Resources/" || echo "No README.md file found"
          cp THIRDPARTY.yml "$APP_DIR/Contents/Resources/" || echo "No THIRDPARTY.yml file found"

          # Create DMG
          mkdir -p release
          hdiutil create -volname "$VOL_NAME" -srcfolder "$APP_DIR" -ov -format UDZO "release/$DMG_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Roadwork-${{ github.ref_name }}-${{ matrix.asset_name }}
          # Adjust path glob to include .dmg, .zip, .tar.gz
          path: release/Roadwork-${{ github.ref_name }}-${{ matrix.asset_name }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/Roadwork-${{ github.ref_name }}-Roadwork-linux-amd64/Roadwork-${{ github.ref_name }}-Roadwork-linux-amd64.tar.gz
            artifacts/Roadwork-${{ github.ref_name }}-Roadwork-macos-amd64/Roadwork-${{ github.ref_name }}-Roadwork-macos-amd64.dmg
            artifacts/Roadwork-${{ github.ref_name }}-Roadwork-windows-amd64.exe/Roadwork-${{ github.ref_name }}-Roadwork-windows-amd64.exe.zip
          name: Disk Mosaic ${{ github.ref_name }}
          body: |
            # Disk Mosaic ${{ github.ref_name }}

            Disk Mosaic is a utility tool that helps you visually identify how your disk space is used and where.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
